apply plugin: 'com.bmuschko.docker-remote-api'

task precomposeKill(type: Exec) {
    environment 'COBALTON_VERSION', project.version.toString()
    executable "docker-compose"
    args "down"
}

task precomposeDelete(type: Exec) {
    dependsOn precomposeKill

    environment 'COBALTON_VERSION', project.version.toString()
    executable "docker-compose"
    args "rm", "-f"
}

task precomposeDeleteCobalton(type: Exec) {
    environment 'COBALTON_VERSION', project.version.toString()
    executable "docker"
    args "container", "rm", "-f", "cobalton"
}

task compose(type: Exec) {
    dependsOn precomposeDelete
    dependsOn precomposeDeleteCobalton

    environment 'COBALTON_VERSION', project.version.toString()
    executable "docker-compose"
    args "up", "-d", "--build", "--force-recreate"
}

task assembleDockerContext(type: Sync) {
    from distTar
    from 'Dockerfile'
    into "$buildDir/docker"
}

task buildDockerImage(type: DockerBuildImage, dependsOn: assembleDockerContext) {
    inputDir = file("$buildDir/docker")
    tag = project.name
}

task updateDockerService(type: DockerClient, dependsOn: buildDockerImage) {
    onNext {
        inspectSwarmCmd().exec()

        // update the service
        def services = listServicesCmd().withNameFilter([project.name]).exec()
        if (services) {
            def service = services[0]
            def taskTemplate = service.spec.taskTemplate
            taskTemplate = taskTemplate.withForceUpdate(taskTemplate.forceUpdate + 1)
            updateServiceCmd(project.name, service.spec.withTaskTemplate(taskTemplate))
                    .withVersion(service.version.index).exec()
        } else {
            throw new RuntimeException("Service with name '$project.name' was not found, please create it first")
        }
    }
}
